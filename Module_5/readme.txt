Module_5_1
Цель: применить на практике знания о классах, объектах и их атрибутах.

Задача "Developer - не только разработчик".

Реализуйте класс House, объекты которого будут создаваться следующим образом:
House('ЖК Эльбрус', 30)
Объект этого класса должен обладать следующими атрибутами:
1. self.name - имя, self.number_of_floors - кол-во этажей.
Также должен обладать методом go_to(new_floor), где new_floor - номер этажа(int), на который нужно приехать.
Метод go_to выводит на экран (в консоль) значения от 1 до new_floor (включительно).
Если же new_floor больше чем self.number_of_floors или меньше 1, то вывести строку "Такого этажа не существует".

Пункты задачи:
1. Создать класс House.
2. Внутри класса House определить метод __init__, в который передать название и кол-во этажей.
3. Внутри метода __init__ создать атрибуты объекта self.name и self.number_of_floors, присвоить им переданные значения.
4. Создать метод go_to с параметром new_floor и написать логику внутри него на основе описания задачи.
5. Создать объект класса House с произвольным названием и количеством этажей.
6. Вызвать метод go_to у этого объекта с произвольным числом.

Пример результата выполнения программы:
Исходные данные:
h1 = House('ЖК Горский', 18)
h2 = House('Домик в деревне', 2)
h1.go_to(5)
h2.go_to(10)

Вывод на консоль:
1
2
3
4
5
"Такого этажа не существует"


Module_5_2
Цель: понять как работают базовые магические методы на практике.

Задача "Магические здания".

Для решения этой задачи будем пользоваться решением к предыдущей задаче.
Необходимо дополнить класс House следующими специальными методами:
1. __len__(self) - должен возвращать кол-во этажей здания self.number_of_floors.
2. __str__(self) - должен возвращать строку: "Название: <название>, кол-во этажей: <этажи>".

Пример результата выполнения программы:
Пример выполняемого кода:
h1 = House('ЖК Эльбрус', 10)
h2 = House('ЖК Акация', 20)

# __str__
print(h1)
print(h2)

# __len__
print(len(h1))
print(len(h2))

Вывод на консоль:
Название: ЖК Эльбрус, кол-во этажей: 10
Название: ЖК Акация, кол-во этажей: 20
10
20


Module_5_3
Цель: применить знания о перегрузке арифметических операторов и операторов сравнения.

Задача "Нужно больше этажей".

Для решения этой задачи будем пользоваться решением к предыдущей задаче "Специальные методы класса".
Необходимо дополнить класс House следующими специальными методами:
1. __eq__(self, other) - должен возвращать True, если количество этажей одинаковое у self и у other.
2. Методы __lt__(<), __le__(<=), __gt__(>), __ge__(>=), __ne__(!=) должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам. Как и в методе __eq__ в сравнении участвует кол-во этажей.
3. __add__(self, value) - увеличивает кол-во этажей на переданное значение value, возвращает сам объект self.
4. __radd__(self, value), __iadd__(self, value) - работают так же как и __add__ (возвращают результат его вызова).
5. Остальные методы арифметических операторов, где self - x, other - y.

Следует заметить, что other может быть не только числом, но и вообще любым объектом другого класса.
Для более точной логики работы методов __eq__, __add__ и других методов сравнения и арифметики перед выполняемыми действиями лучше убедиться в принадлежности к типу при помощи функции isinstance.
isinstance(other, int) - other указывает на объект типа int.
isinstance(other, House) - other указывает на объект типа House.

Пример результата выполнения программы:
Пример выполняемого кода:
h1 = House('ЖК Эльбрус', 10)
h2 = House('ЖК Акация', 20)
print(h1)
print(h2)
print(h1 == h2) # __eq__
h1 = h1 + 10 # __add__
print(h1)
print(h1 == h2)
h1 += 10 # __iadd__
print(h1)
h2 = 10 + h2 # __radd__
print(h2)
print(h1 > h2) # __gt__
print(h1 >= h2) # __ge__
print(h1 < h2) # __lt__
print(h1 <= h2) # __le__
print(h1 != h2) # __ne__

Вывод на консоль:
Название: ЖК Эльбрус, кол-во этажей: 10
Название: ЖК Акация, кол-во этажей: 20
False
Название: ЖК Эльбрус, кол-во этажей: 20
True
Название: ЖК Эльбрус, кол-во этажей: 30
Название: ЖК Акация, кол-во этажей: 30
False
True
False
True
False

Примечания:
1. Методы __iadd__ и __radd__ не обязательно описывать заново, достаточно вернуть значение вызова __add__.


Module_5_4
Цель: понять разницу между атрибутами объекта и класса, дополнив уже существующий класс. Применить метод __new__.

Задача "История строительства".

Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".
В классе House создать атрибут houses_history = [], который будет хранить названия созданных объектов.
Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к атрибутам класса используя ссылку на сам класс - cls.
Дополнить метод __new__ так, чтобы:
1. Название объекта добавлялось в список cls.houses_history.
2. Название строения можно взять из args по индексу.
Также переопределить метод __del__(self) в котором будет выводиться строка "<название> снесён, но он останется в истории".
Создайть несколько объектов класса House и проверить работу методов __del__ и __new__, а также значение атрибута houses_history.

Пример результата выполнения программы:
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)

# Удаление объектов
del h2
del h3
print(House.houses_history)

Вывод на консоль:
['ЖК Эльбрус']
['ЖК Эльбрус', 'ЖК Акация']
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Акация снесён, но он останется в истории
ЖК Матрёшки снесён, но он останется в истории
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Эльбрус снесён, но он останется в истории


Module_5_hard
Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности.

Задание "Свой YouTube".

Университет Urban подумывает о создании своей платформы, где будут размещаться дополнительные полезные ролики на тему IT (юмористические, интервью и т.д.).
Конечно же для старта написания интернет ресурса требуются хотя бы базовые знания программирования.
Именно вам выпала возможность продемонстрировать их, написав небольшой набор классов, которые будут выполнять похожий функционал на сайте.
Всего будет 3 класса: UrTube, Video, User.

Общее ТЗ:
Реализовать классы для взаимодействия с платформой, каждый из которых будет содержать методы добавления видео, авторизации и регистрации пользователя и т.д.

Подробное ТЗ:
Каждый объект класса User должен обладать следующими атрибутами и методами:
Атрибуты:
1. nickname (имя пользователя, строка).
2. password (в хэшированном виде, число).
3. age (возраст, число).

Каждый объект класса Video должен обладать следующими атрибутами и методами:
Атрибуты:
1. title (заголовок, строка).
2. duration (продолжительность, секунды).
3. time_now (секунда остановки (изначально 0)).
4. adult_mode (ограничение по возрасту, bool (False по умолчанию)).

Каждый объект класса UrTube должен обладать следующими атрибутами и методами:
Атрибуты:
1. users (список объектов User).
2. videos (список объектов Video).
3. current_user (текущий пользователь, User).
Методы:
1. Метод log_in, который принимает на вход аргументы: nickname, password и пытается найти пользователя в users с такими же логином и паролем. Если такой пользователь существует, то current_user меняется на найденного. Помните, что password передаётся в виде строки, а сравнивается по хэшу.
2. Метод register, который принимает три аргумента: nickname, password, age, и добавляет пользователя в список, если пользователя не существует (с таким же nickname). Если существует, выводит на экран: "Пользователь {nickname} уже существует". После регистрации, вход выполняется автоматически.
3. Метод log_out для сброса текущего пользователя на None.
4. Метод add, который принимает неограниченное кол-во объектов класса Video и все добавляет в videos, если с таким же названием видео ещё не существует. В противном случае ничего не происходит.
5. Метод get_videos, который принимает поисковое слово и возвращает список названий всех видео, содержащих поисковое слово. Следует учесть, что слово 'UrbaN' присутствует в строке 'Urban the best' (не учитывать регистр).
6. Метод watch_video, который принимает название фильма, если не находит точного совпадения (вплоть до пробела), то ничего не воспроизводится, если же находит - ведётся отчёт в консоль на какой секунде ведётся просмотр. После текущее время просмотра данного видео сбрасывается.
Для метода watch_video так же учитывайте следующие особенности:
1. Для паузы между выводами секунд воспроизведения можно использовать функцию sleep из модуля time.
2. Воспроизводить видео можно только тогда, когда пользователь вошёл в UrTube. В противном случае выводить в консоль надпись: "Войдите в аккаунт, чтобы смотреть видео".
3. Если видео найдено, следует учесть, что пользователю может быть отказано в просмотре, т.к. есть ограничения 18+. Должно выводиться сообщение: "Вам нет 18 лет, пожалуйста покиньте страницу".
4. После воспроизведения нужно выводить: "Конец видео".

Код для проверки:
ur = UrTube()
v1 = Video('Лучший язык программирования 2024 года', 200)
v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

# Добавление видео
ur.add(v1, v2)

# Проверка поиска
print(ur.get_videos('лучший'))
print(ur.get_videos('ПРОГ'))

# Проверка на вход пользователя и возрастное ограничение
ur.watch_video('Для чего девушкам парень программист?')
ur.register('vasya_pupkin', 'lolkekcheburek', 13)
ur.watch_video('Для чего девушкам парень программист?')
ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
ur.watch_video('Для чего девушкам парень программист?')

# Проверка входа в другой аккаунт
ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
print(ur.current_user)

# Попытка воспроизведения несуществующего видео
ur.watch_video('Лучший язык программирования 2024 года!')

Вывод в консоль:
['Лучший язык программирования 2024 года']
['Лучший язык программирования 2024 года', 'Для чего девушкам парень программист?']
Войдите в аккаунт, чтобы смотреть видео
Вам нет 18 лет, пожалуйста покиньте страницу
1 2 3 4 5 6 7 8 9 10 Конец видео
Пользователь vasya_pupkin уже существует
urban_pythonist

Примечания:
1. Не забывайте для удобства использовать dunder(магические) методы: __str__, __repr__, __contains__, __eq__ и др.
2. Чтобы не запутаться рекомендуется после реализации каждого метода проверять как он работает, тестировать разные вариации.